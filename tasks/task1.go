package tasks

import (
	"fmt"
	"time"
)

/*
Задание 1. Как сделать так, чтобы числа вывелись по порядку?

Чтобы числа вывелись по порядку среза records, предлагаю 2 варианта:
1 - с использованием задержки - менее универсальный и менее оптимальный, но рабочий метод (на конфигурации моего ПК)
Основным недостатком является использование time.Sleep(), т.к. во-первых, это использование впустую процессорного времени,
а во-вторых, в горутине может быть "долгий в исполнении код", а не просто вывод в консоль. Это может привести к нарушению условия
задачи.

2 - с использованием канала. Реализация более подробно описана в комментариях ниже
*/

/* // Вариант 1
func main() {
	records := []int{10, 2, 3, 4, 5, 6, 7, 8, 9, 1} // {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	for index, i := range records {
		go func(i, index int) {
			time.Sleep(time.Millisecond * 2 * time.Duration(index))
			fmt.Println(i)
		}(i, index)
	}
	time.Sleep(100 * time.Millisecond)
}*/

// Вариант 2
func Task1() {
	records := []int{10, 2, 3, 4, 5, 6, 7, 8, 9, 1} // {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	c := make(chan int)

	for _, i := range records {
		// запуск горутины
		go func(c chan int) {
			// ждем сообщения из канала
			fmt.Println(<-c)
			// горутина выполнила свое задание, и только после выполнения выслала ответ в канал о завершении
			c <- 0
		}(c)
		// на этом моменте горутина запущена, ждет сообщения в канале:
		c <- i
		// запуск следующей итерации (и горутины) отложен до ответа активной горутины о выполнении:
		<-c
	}

	time.Sleep(100 * time.Millisecond)
}
